//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MessagePackCompiler.Generator {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class FormatterTemplate : FormatterTemplateBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write(@"// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            this.Write("\n{\n    using System;\n    using System.Buffers;\n    using MessagePack;\n    using E" +
                    "ntitas;\n\n");
 foreach(var objInfo in ObjectSerializationInfos) {
    bool isFormatterResolverNecessary = ShouldUseFormatterResolverHelper.ShouldUseFormatterResolver(objInfo.Members);
            this.Write("\n    public sealed class ");
            this.Write(this.ToStringHelper.ToStringWithCulture( objInfo.Name ));
            this.Write("Formatter");
            this.Write(this.ToStringHelper.ToStringWithCulture( (objInfo.IsOpenGenericType ? $"<{string.Join(",", objInfo.GenericTypeParameters.Select(x => x.Name))}>" : "") ));
            this.Write(" : global::MessagePack.Formatters.IMessagePackFormatter<");
            this.Write(this.ToStringHelper.ToStringWithCulture( objInfo.FullName ));
            this.Write(">\n");
 foreach(var typeArg in objInfo.GenericTypeParameters.Where(x => x.HasConstraints)) { 
            this.Write("        where ");
            this.Write(this.ToStringHelper.ToStringWithCulture( typeArg.Name ));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( typeArg.Constraints ));
            this.Write("\n");
 } 
            this.Write("    {\n");
 foreach(var item in objInfo.Members) { 
 if(item.CustomFormatterTypeName != null) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture( item.CustomFormatterTypeName ));
            this.Write(" __");
            this.Write(this.ToStringHelper.ToStringWithCulture( item.Name ));
            this.Write("CustomFormatter__ = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture( item.CustomFormatterTypeName ));
            this.Write("();\n");
 } 
 } 
            this.Write("\n");
 if(objInfo.IsComponent) { 
            this.Write("        private System.Collections.Concurrent.ConcurrentBag<IComponent> m_entitas" +
                    "ComponentPool = null;\n");
 } 
            this.Write("\n        public void Serialize(ref MessagePackWriter writer, ");
            this.Write(this.ToStringHelper.ToStringWithCulture( objInfo.FullName ));
            this.Write(" value, global::MessagePack.MessagePackSerializerOptions options)\n        {\n");
 if( objInfo.IsClass) { 
            this.Write("            if (value == null)\n            {\n                writer.WriteNil();\n " +
                    "               return;\n            }\n\n");
 }

  if (isFormatterResolverNecessary) { 
            this.Write("            IFormatterResolver formatterResolver = options.Resolver;\n");
}

  if(objInfo.HasIMessagePackSerializationCallbackReceiver && objInfo.NeedsCastOnBefore) { 
            this.Write("            ((IMessagePackSerializationCallbackReceiver)value).OnBeforeSerialize(" +
                    ");\n");
 } else if(objInfo.HasIMessagePackSerializationCallbackReceiver) { 
            this.Write("            value.OnBeforeSerialize();\n");
 } 
            this.Write("            writer.WriteArrayHeader(");
            this.Write(this.ToStringHelper.ToStringWithCulture( objInfo.MaxKey + 1 ));
            this.Write(");\n");
 for(var i =0; i<= objInfo.MaxKey; i++) { var member = objInfo.GetMember(i); 
 if( member == null) { 
            this.Write("            writer.WriteNil();\n");
 } else { 
            this.Write("            ");
            this.Write(this.ToStringHelper.ToStringWithCulture( member.GetSerializeMethodString() ));
            this.Write(";\n");
 } } 
            this.Write("        }\n\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture( objInfo.FullName ));
            this.Write(" Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSeriali" +
                    "zerOptions options)\n        {\n            if (reader.TryReadNil())\n            {" +
                    "\n");
 if( objInfo.IsClass) { 
            this.Write("                return null;\n");
 } else { 
            this.Write("                throw new InvalidOperationException(\"typecode is null, struct not" +
                    " supported\");\n");
 } 
            this.Write("            }\n\n");
 if(objInfo.IsComponent) { 
            this.Write("            if (m_entitasComponentPool == null)\n            {\n                m_e" +
                    "ntitasComponentPool = Entitas.ComponentPool.Get<");
            this.Write(this.ToStringHelper.ToStringWithCulture( objInfo.FullName ));
            this.Write(">();\n            }\n");
 } 
            this.Write("\n            options.Security.DepthStep(ref reader);\n");
 if (isFormatterResolverNecessary) { 
            this.Write("            IFormatterResolver formatterResolver = options.Resolver;\n");
 } 
            this.Write("            var length = reader.ReadArrayHeader();\n");
 foreach(var x in objInfo.Members) { 
            this.Write("            var __");
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Name ));
            this.Write("__ = default(");
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Type ));
            this.Write(");\n");
 } 
            this.Write("\n            for (int i = 0; i < length; i++)\n            {\n                switc" +
                    "h (i)\n                {\n");
 foreach(var x in objInfo.Members) { 
            this.Write("                    case ");
            this.Write(this.ToStringHelper.ToStringWithCulture( x.IntKey ));
            this.Write(":\n                        __");
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Name ));
            this.Write("__ = ");
            this.Write(this.ToStringHelper.ToStringWithCulture( x.GetDeserializeMethodString() ));
            this.Write(";\n                        break;\n");
 } 
            this.Write("                    default:\n                        reader.Skip();\n             " +
                    "           break;\n                }\n            }\n\n            ");
            this.Write(this.ToStringHelper.ToStringWithCulture( objInfo.FullName ));
            this.Write(" ____result;\n\n");
 if(objInfo.IsComponent) { 
            this.Write("            if (m_entitasComponentPool.TryTake(out IComponent component))\n       " +
                    "         ____result = component as ");
            this.Write(this.ToStringHelper.ToStringWithCulture( objInfo.FullName ));
            this.Write(";\n            else\n");
 } 
            this.Write("                ____result = new ");
            this.Write(this.ToStringHelper.ToStringWithCulture( objInfo.GetConstructorString()  ));
            this.Write(";\n\n");
 foreach(var x in objInfo.Members.Where(x => x.IsWritable)) { 
            this.Write("            ____result.");
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Name ));
            this.Write(" = __");
            this.Write(this.ToStringHelper.ToStringWithCulture( x.Name ));
            this.Write("__;\n");
 } 
if(objInfo.HasIMessagePackSerializationCallbackReceiver && objInfo.NeedsCastOnAfter) { 
            this.Write("            ((IMessagePackSerializationCallbackReceiver)____result).OnAfterDeseri" +
                    "alize();\n");
 } else if(objInfo.HasIMessagePackSerializationCallbackReceiver) { 
            this.Write("            ____result.OnAfterDeserialize();\n");
 } 
            this.Write("            reader.Depth--;\n            return ____result;\n        }\n    }\n");
 } 
            this.Write(@"}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class FormatterTemplateBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
